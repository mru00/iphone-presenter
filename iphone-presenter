#! /usr/bin/env python


#http://snippets.dzone.com/posts/show/4912
#http://matt.might.net/articles/how-to-native-iphone-ipad-apps-in-javascript/


# mru, 2011-02


import sys, os, platform, shutil
import BaseHTTPServer
from SimpleHTTPServer import SimpleHTTPRequestHandler
from mako.template import Template
import dbus



# marking as html5 does not work, then
# table colspan goes wrong.
# temporarily disable doctype
# <!DOCTYPE html>

APPDIR = os.path.dirname(os.path.realpath(__file__))

def pgup():
    os.system(r"xvkbd -text '\[Next]'")

def pgdown():
    os.system(r"xvkbd -text '\[Prior]'")

class MyHandler(SimpleHTTPRequestHandler):
    protocol = "HTTP/1.0"

    def do_GET(self):
        print "get", self.path

        def read(filename):
            return open(filename, 'r').read()


        def readrel(filename):
            return read(os.path.join(APPDIR,filename))


        def resp(code, mime, text):
            self.send_response(code)
            self.send_header("Content-type", mime)
            self.end_headers()
            self.wfile.write(text)

        if self.path == "/":
            resp(200, "text/html", Template(readrel('index.html')).render(nodename=platform.node()))
            return

        if self.path == "/style.css":
            resp(200, "text/css", readrel('presenter.css'))
            return

        if self.path == "/cache.manifest":
            resp(200, "text/cache-manifest", readrel('cache.manifest'))
            return

        if self.path == "/touch-icon-iphone4.png":
            resp(200, "image/png", readrel('remote.png'))
            return

        if self.path == "/remote.js":
            resp(200, "text/javascript", readrel('presenter.js'))
            return

        if self.path == "/do/prev":
            pgdown()
            resp(200, "text/html", "prev!")
            return

        if self.path == "/do/next":
            pgup()
            resp(200, "text/html", "next!")
            return

        else:
            resp(404, "text/html", "failure: location not found")
            print "location not available:", self.path
            return

server_address = ('0.0.0.0', 8100)
httpd = BaseHTTPServer.HTTPServer(server_address, MyHandler)

sa = httpd.socket.getsockname()
print "Serving on", sa[0], "port", sa[1]
httpd.serve_forever()
